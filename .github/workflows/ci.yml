name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  BUILD_TYPE: Release
  ANDROID_NDK_VERSION: r25c

jobs:
  test-native:
    name: Native Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up CMake
      uses: lukka/get-cmake@latest
      
    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_TESTS=ON
      
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel 4
      
    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{env.BUILD_TYPE}} --verbose --output-on-failure
      
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: test-results-${{ matrix.os }}
        path: ${{github.workspace}}/build/Testing/

  build-android:
    name: Android Build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Set up Android SDK
      uses: android-actions/setup-android@v2
      
    - name: Install Android NDK
      run: |
        echo "y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "ndk;${{ env.ANDROID_NDK_VERSION }}"
        echo "ANDROID_NDK=$ANDROID_HOME/ndk/${{ env.ANDROID_NDK_VERSION }}" >> $GITHUB_ENV
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Configure CMake for Android
      run: |
        cmake -B ${{github.workspace}}/build-android \
          -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=arm64-v8a \
          -DANDROID_PLATFORM=android-26 \
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
          
    - name: Build native library
      run: cmake --build ${{github.workspace}}/build-android --config ${{env.BUILD_TYPE}}
      
    - name: Grant execute permission for gradlew
      run: chmod +x android/gradlew
      working-directory: ${{github.workspace}}
      if: ${{ hashFiles('android/gradlew') != '' }}
      
    - name: Build APK
      run: ./gradlew assembleDebug
      working-directory: ${{github.workspace}}/android
      if: ${{ hashFiles('android/gradlew') != '' }}
      
    - name: Upload APK
      uses: actions/upload-artifact@v3
      if: ${{ hashFiles('android/app/build/outputs/apk/debug/*.apk') != '' }}
      with:
        name: debug-apk
        path: android/app/build/outputs/apk/debug/*.apk

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install cpplint
      run: pip install cpplint
      
    - name: Run cpplint
      run: |
        find engine/src engine/include -name "*.cpp" -o -name "*.h" | xargs cpplint --filter=-legal/copyright,-build/include_subdir
      continue-on-error: true
      
    - name: Set up clang-format
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format
        
    - name: Check code formatting
      run: |
        find engine/src engine/include -name "*.cpp" -o -name "*.h" | xargs clang-format --dry-run --Werror
      continue-on-error: true

  documentation:
    name: Build Documentation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Doxygen
      run: |
        sudo apt-get update
        sudo apt-get install -y doxygen graphviz
        
    - name: Generate documentation
      run: |
        if [ -f Doxyfile ]; then
          doxygen Doxyfile
        else
          echo "No Doxyfile found, skipping documentation generation"
        fi
        
    - name: Upload documentation
      uses: actions/upload-artifact@v3
      if: ${{ hashFiles('docs/html/index.html') != '' }}
      with:
        name: documentation
        path: docs/html/